install.packages("tidyverse")
install.packages("jsonlite")
setwd("~/Desktop/berkeley_data/module_15/r_analysis")
setwd("~/Desktop/berkeley_data/module_15/r_analysis/01_Demo")
x <- 3
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
?c
?install.packages()
?read.csv()
demo_table <- read.csv(
file='demo.csv'
, check.names=F
, stringsAsFactors = F
)
View(demo_table)
source('~/.active-rstudio-document')
demo_table <- read.csv(
file='demo.csv'
, check.names=F
, stringsAsFactors = F
)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
demo_table$Vehicle_Class
demo_table$"Vehicle_Class"
View(demo_table)
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
?subset()
# filter by price and drivetrain
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
# Add columns to original data frame
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
# Add columns to original data frame
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
# Add columns to original data frame
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE)
View(demo_table)
View(demo_table)
#create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer))
View(summarize_demo)
#create summary table with multiple columns
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n())
View(summarize_demo)
?gather
?gather()
?pivot_longer()
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
View(long_table)
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
all.equal(demo_table3, wide_table)
wide_table <- wide_table[,order(colnames(table))]
wide_table <- wide_table[,order(colnames(wide_table))]
demo_table3 <- demo_table3[,order(colnames(demo_table3))]
all.equal(demo_table3, wide_table)
head(mpg)
#import dataset into ggplot2
plt <- ggplot(mpg, aes(x=class))
#plot a bar plot
plt + geom_bar()
#create summary table
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n())
#import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
#plot a bar plo
plt + geom_col()
#plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
#import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))  + geom_col()
#plot a bar plo
plt
#plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
#rotate the x-axis label 45 degrees and plot a boxplot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + theme(axis.text.x=element_text(angle=45,hjust=1))
#create summary table
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy))
#import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
# plot line plot
plt + geom_line()
#add line plot with labels
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty))
#add scatter plot with labels
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
#add scatter plot with labels
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
#add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
#import dataset into ggplot2 with Fuel-Efficiency as size
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv,size=mpg))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
#import dataset into ggplot2 with Fuel-Efficiency as size
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
plt + geom_point(aes(size=mpg)) + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
View(mpg_summary)
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
#add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
#import dataset into ggplot2 with Fuel-Efficiency as size
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
plt + geom_point(aes(size=mpg_summary)) + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
#import dataset into ggplot2 with Fuel-Efficiency as size
plt <- ggplot(mpg_summary,aes(x=displ,y=cty,color=class,shape=drv))
plt + geom_point(aes(size=mpg_summary)) + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
#import dataset into ggplot2 with Fuel-Efficiency as size
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
mpg
#import dataset into ggplot2 with Fuel-Efficiency as size
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
plt + geom_point(aes(size=cty)) + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
#add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(colour = "#3366FF") + theme(axis.text.x=element_text(angle=45,hjust=1))
#add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot(colour = "#3366FF", linetype="dotted") + theme(axis.text.x=element_text(angle=45,hjust=1))
#create summary table
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy))
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
#create heatmap with labels
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)")
#create summary table
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy))
#import dataset into ggplot2
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy))
#add heatmap with labels and  rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ)) #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ))
#import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
#add scatter plot with labels
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
#overlay with error bars
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
#convert to long format
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
head(mpg_long)
#import dataset into ggplot2
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
#add boxplot with labels rotated 45 degrees
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#import dataset into ggplot2
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
#create multiple boxplots, one for each MPG type
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
#rotate x-axis labels
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer")
#visualize distribution using density plots
ggplot(mtcars,aes(x=wt)) + geom_density()
?shapiro.test
# Test noramlity using shapiro
shapiro.test(mtcars$wt)
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
#randomly sample 50 data points
sample_table <- population_table %>% sample_n(50)
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
#compare sample versus population means
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
#generate 50 randomly sampled data points
sample_table <- population_table %>% sample_n(50)
#generate another 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50)
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
?t.test()
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
#compare the mean difference between two samples8
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
#Is there any statistical difference in the horsepower of a vehicle based on its engine type?
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
#compare means across multiple levels
aov(hp ~ cyl,data=mtcars_filt)
#compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
# Correlation
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
#Linear Regression
# Linear Regresssion
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec ~ hp,mtcars) #create linear model)
)
#create linear model
model <- lm(qsec ~ hp,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
#import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
#plot scatter and linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
# Multiple Linear Regression
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
# Multiple Linear Regression
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate multiple linear regression model
# Chi Squared
table(mpg$class,mpg$year) #generate contingency table
# Chi Squared
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("~/Desktop/berkeley_data/module_15/r_analysis/02_Challenge")
head(mtcars)
head(MechaCar_mpg)
mecha_car_mpg <- read.csv(
file='MechaCar_mpg.csv'
, check.names=F
, stringsAsFactors = F
)
head(mecha_car_mpg)
# MPG Regression
summary(lm(qsec ~ mpg + vehicle length,data=mecha_car_mpg))
# MPG Regression
summary(lm(qsec ~ mpg + "vehicle length",data=mecha_car_mpg))
# MPG Regression
summary(lm(qsec ~ mpg + vehicle_length,data=mecha_car_mpg))
# MPG Regression
summary(lm(mpg ~ vehicle_length,data=mecha_car_mpg))
# MPG Regression
summary(lm(mpg ~ vehicle length,data=mecha_car_mpg))
View(mecha_car_mpg)
# MPG Regression
summary(lm(mpg ~ vehiclelength,data=mecha_car_mpg))
#Rename Columns
colnames(mecha_car_mpg)
names(mecha_car_mpg)
names(mecha_car_mpg)[names(mecha_car_mpg) == "vehicle length"] <- "vehicle_length"
names(mecha_car_mpg)
names(mecha_car_mpg)[names(mecha_car_mpg) == "vehicle weight"] <- "vehicle_weight"
names(mecha_car_mpg)[names(mecha_car_mpg) == "spoiler angle"] <- "spoiler_angle"
names(mecha_car_mpg)[names(mecha_car_mpg) == "ground clearance"] <- "ground_clearance"
head(mecha_car_mpg)
# MPG Regression
summary(lm(mpg ~ vehicle_length,data=mecha_car_mpg))
# MPG Regression
summary(lm(mpg ~ vehicle_length + vehicle_width,data=mecha_car_mpg))
# MPG Regression
summary(lm(mpg ~ vehicle_length + vehicle_weight,data=mecha_car_mpg))
# MPG Regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD,data=mecha_car_mpg))
# MPG Regression
summary(lm(mpg ~ vehicle_length + ground_clearance + AWD,data=mecha_car_mpg))
# MPG Regression
summary(lm(mpg ~ vehicle_length + ground_clearance,data=mecha_car_mpg))
suspension_coil <- read.csv(
file='Suspension_Coil'
, check.names=F
, stringsAsFactors = F
)
suspension_coil <- read.csv(
file='Suspension_Coil.csv'
, check.names=F
, stringsAsFactors = F
)
# Summary Table
head(suspension_coil)
View(mpg_summary)
View(demo_table2)
summarize_psi <- suspension_coil %>% summarize(mean_psi=mean(PSI))
head(summarize_psi)
summarize_psi <- suspension_coil %>% summarize(mean_psi=mean(PSI)) %>% summarize(median_psi=median(PSI))
summarize_psi <- suspension_coil %>% summarize(median_psi=median(PSI))
head(summarize_psi)
summarize_psi <- suspension_coil %>% summarize(mean_psi=mean(PSI)) %>%  summarize(median_psi=median(PSI))
summarize_psi <- suspension_coil %>% summarize(mean_psi=mean(PSI))
summarize_psi["median_psi"] <- suspension_coil %>% summarize(median_psi=median(PSI))
head(summarize_psi)
summarize_psi <- suspension_coil %>% summarize(mean=mean(PSI))
summarize_psi["median"] <- suspension_coil %>% summarize(median=median(PSI))
summarize_psi["variance"] <- suspension_coil %>% summarize(variance=var(PSI))
head(summarize_psi)
summarize_psi["stdv"] <- suspension_coil %>% summarize(sd=sd(PSI))
head(summarize_psi)
head(suspension_coil$PSI)
?t.test()
# Suspension Coil T-Test
t.test(
suspension_coil$PSI
,mu=1500
)
# Suspension Coil T-Test
t.test(
log10(suspension_coil$PSI)
,mu=1500
)
# Suspension Coil T-Test
t.test(
suspension_coil$PSI
,mu=1500
)
log10(
)
# Suspension Coil T-Test
t.test(
log10(suspension_coil$PSI)
,mu=1500
)
# Suspension Coil T-Test
t.test(
suspension_coil$PSI
,mu=1500
)
